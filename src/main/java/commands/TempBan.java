package commands;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;

import com.jagrosh.jdautilities.commons.waiter.EventWaiter;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageChannel;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.guild.GuildMessageReceivedEvent;
import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.sharding.ShardManager;

public class TempBan extends ListenerAdapter {
    EventWaiter waiter = new EventWaiter();

    public TempBan(EventWaiter waiter) {
        this.waiter = waiter;
    }

    public String prefix(long id) throws NumberFormatException, IOException {

        BufferedReader br = new BufferedReader(new FileReader("/Users/5kyle/IdeaProjects/KekBot/GuildData(Ignore)/Prefixes"));
        StringTokenizer st = null;
        String line;
        while ((line = br.readLine()) != null) {
            st = new StringTokenizer(line);
            if (id == Long.parseLong(st.nextToken())) {
                br.close();
                String prefix = st.nextToken();

                return prefix;
            }
        }
        br.close();
        return "ERROR";
    }

    public void onGuildMessageReceived(GuildMessageReceivedEvent event) {
        String prefix = "";
        try {
            prefix = prefix(event.getGuild().getIdLong());
        } catch (NumberFormatException | IOException e) {
            e.printStackTrace();
        }
        Message message = event.getMessage();
        String content = message.getContentRaw();
        MessageChannel channel = event.getChannel();

        String reason = "";
        long channelID = channel.getIdLong();
        long user;
        if (content.startsWith(prefix + "tempban")) {
            user = event.getMember().getUser().getIdLong();

            if (event.getMember().hasPermission(Permission.BAN_MEMBERS)) {

                String[] spliced = content.split("\\s+");
                TextChannel textChannel = null;
                try {
                    textChannel = event.getGuild().getTextChannelsByName("log", true).get(0);
                } catch (IndexOutOfBoundsException e) {
                    try {
                        event.getGuild().createTextChannel("log").complete();
                    } catch (InsufficientPermissionException e1) {
                        channel.sendMessage("Please give me administrator!").queue();
                    }
                    textChannel = event.getGuild().getTextChannelsByName("log", true).get(0);
                    textChannel.getManager().setTopic("Autogenerated log for Inutile bot!").queue();
                    Role temprole = event.getGuild().getPublicRole();
                    textChannel.putPermissionOverride(temprole).setDeny(Permission.VIEW_CHANNEL).queue();
                    channel.sendMessage(
                            "Channel named log has been created, and it will report Inutile moderation actions!")
                            .queue();

                }

                int length = spliced.length;
                if (length >= 3) {
                    if (length == 3) {
                        channel.sendMessage(
                                "You must provide a reason for this command, as banning someone is an extremely serious action to take.")
                                .queue();

                    } else if (length > 3) {
                        if (spliced[1].startsWith("<@")) {
                            reason = "";
                            for (int i = 3; i < length; i++) {
                                reason += spliced[i];
                                reason += " ";
                            }
                            int time = 0;
                            try {
                                time = Integer.parseInt(spliced[2]);
                            } catch (NumberFormatException e) {
                                channel.sendMessage("Can you use the command correctly PLEASE? Just do " + prefix
                                        + "tempban @<user> time [reason]! SIMPLE!").queue();
                                return;
                            }
                            List<Member> mentionedMembers = message.getMentionedMembers();
                            Member mentionedMember = mentionedMembers.get(0);
                            if (mentionedMember.hasPermission(Permission.BAN_MEMBERS)) {
                                channel.sendMessage(
                                        "This person is also able to ban members, I can't do that! If you are higher in the role hierarchy, remove these permissions/roles!")
                                        .queue();
                            } else {
                                channel.sendMessage("Are you sure? Type 'yes' in this channel to confirm this tempban.")
                                        .queue();

                                initWaiter(channelID, user, event.getJDA().getShardManager(), mentionedMember,
                                        textChannel, reason, channel, time);
                            }

                        } else {
                            channel.sendMessage("Can you use the command correctly PLEASE? Just do " + prefix
                                    + "tempban @<user> time [reason]! SIMPLE!").queue();
                        }

                    }
                } else {
                    channel.sendMessage("This command will temporarily ban someone "
                            + "from the server. To use this command, just do " + prefix
                            + "tempban @<user> time [reason]!").queue();
                }
            } else {
                channel.sendMessage("You failed to account for the fact that you aren't allowed to do this.").queue();
            }

        }
    }

    private void initWaiter(long channel, long user, ShardManager shardmanager, Member member, TextChannel log,
                            String reason, MessageChannel sendchannel, int time) {
        waiter.waitForEvent(MessageReceivedEvent.class, (event) -> {
            long nchannel = event.getChannel().getIdLong();
            long nuser = event.getMember().getUser().getIdLong();

            return channel == nchannel && user == nuser && event.getMessage().getContentRaw().equalsIgnoreCase("yes")
                    && time > 0;
        }, (event) -> {
            member.ban(1, reason).queue();
            User userID = member.getUser();
            EmbedBuilder info = new EmbedBuilder();
            info.setTitle("NEW TEMPBAN");
            info.addField("Info:",
                    member.getEffectiveName() + " was tempbanned by " + event.getMember().getEffectiveName(), false);
            info.addField("Reason Given:", reason, false);
            info.setColor(0xeb3434);
            info.addField("Time:", time + " days", false);
            info.setFooter(event.getMember().getUser().getAsTag());
            log.sendMessage(info.build()).queue();
            event.getChannel().sendMessage("TempBan successful! :white_check_mark:").queue();
            event.getGuild().unban(userID).queueAfter(time, TimeUnit.DAYS);
            info.clear();
            info.setTitle("NEW UNBAN");
            info.addField("Info:", member.getEffectiveName() + " was has officially been unbanned after their ban by "
                    + event.getMember().getEffectiveName(), false);
            info.setColor(0x03a5fc);
            info.addField("Time:", time + " days", false);
            info.setFooter(event.getMember().getUser().getAsTag());
            log.sendMessage(info.build()).queueAfter(time, TimeUnit.DAYS);

        }, 10, TimeUnit.SECONDS, () -> {
            sendchannel
                    .sendMessage("You didn't respond with 'yes' in time! Retry the command if you want to ban someone.")
                    .queue();
            ;
        });
    }
}
